
This example is using an msp430 launchpad board as an AVR ISP.

The AVR board used initially is the Sparkfun pro micro 8Mhz/3.3v

http://www.sparkfun.com/products/10999

From an AVR document the chips with this serial isp are either byte
mode or page mode.  This chip atmega32u4 is page mode so you load a
temporary buffer with 64 instructions, then send one command to program
that buffer into a page of flash.

The serial protocol is quite trivial so writing code to use it or modify
this program is simple.

At this time the code only supports one page/buffer, 64 instructions.

At this time not worrying about exact timing, it is fast enough using
count to N loops.

promicro board JP6 (right side)

1
2   gnd
3   reset
4   vcc
5
6
7
8
9   sck
10  miso
11  mosi
12

msp

p1.4    to mosi
p1.5    to miso
p1.6    to sck
p1.7    to reset

also grab vcc and gnd off of the msp430 board, 6 jumpers/wires total.

This was developed/tested against an msp430g2553 which comes with one
flavor of the msp430 launchpad kit.  That part has a uart, the parts
that come with the other flavor of launchpad kit (I dont know that you
have a choice what you get) do not have uarts.  Set the define in the
source file to build with the UART output.  The uart output is on p1.2.

Now not all msp430 parts have the same complement of internals and
register addresses so verify the P1DIR, P1OUT registers at a minimum
match what is in this program.




This is not a bad combination of boards to have to play with, the
msp430 is ideally $4.30 from ti but it is shipped from outside the us and
can take a while, or get it for $6 from sparkfun.  The pro micro is a
usable ardino like board but half to a third of the price of an arduino.

http://www.sparkfun.com/products/10020
http://www.sparkfun.com/products/10999



mspgcc is required for the msp430 code
avra is used for the avr blinker code
mspdebug is used to load it:
mspdebug rf2500
at the debug prompt
prog out.hex
exit

and it will restart the msp which programs the avr



mspgcc build instructions from the mspgcc wiki, which I assume is
updated regularly so check back and get the latest


wget http://sourceforge.net/projects/mspgcc/files/mspgcc/mspgcc-20120406.tar.bz2
wget http://ftpmirror.gnu.org/binutils/binutils-2.21.1a.tar.bz2
wget http://ftpmirror.gnu.org/gcc/gcc-4.6.3/gcc-core-4.6.3.tar.bz2

tar xjvf mspgcc-20120406.tar.bz2
tar xjvf binutils-2.21.1a.tar.bz2
tar xjvf gcc-core-4.6.3.tar.bz2

cd binutils-2.21.1
patch -p1<../mspgcc-20120406/msp430-binutils-2.21.1a-20120406.patch
cd ..
cd gcc-4.6.3
patch -p1<../mspgcc-20120406/msp430-gcc-4.6.3-20120406.patch
cd ..

mkdir binutils-2.21.1-msp430
mkdir gcc-4.6.3-msp430

cd binutils-2.21.1-msp430
../binutils-2.21.1/configure --target=msp430 --program-prefix="msp430-"

make
sudo make install

cd ../gcc-4.6.3-msp430
../gcc-4.6.3/configure --target=msp430 --enable-languages=c --program-prefix="msp430-"

make
sudo make install





